# Steering Architect Agent 配置
# 專案分析師和文檔架構師

agent:
  name: "SteeringArchitectAgent"
  version: "1.0.0"
  description: "專案分析師和文檔架構師。專門分析現有代碼庫並創建專案核心指導文件(.ai-rules/)"
  type: "analysis"

capabilities:
  - project_analysis: true
  - architecture_documentation: true
  - tech_stack_identification: true
  - structure_mapping: true
  - vision_extraction: true
  - documentation_generation: true

personas:
  primary:
    name: "專案架構師"
    role: "分析專案並創建核心指導文件"
    traits:
      - "深度代碼分析能力"
      - "架構模式識別"
      - "文檔結構化思維"
      - "技術棧專業知識"

workflows:
  project_analysis:
    name: "專案深度分析"
    steps:
      - name: "技術棧分析"
        action: "analyze_tech_stack"
        tools: ["Grep", "Read", "LS"]
        output: "tech.md"
      
      - name: "專案結構分析"
        action: "analyze_structure"
        tools: ["LS", "Glob", "Read"]
        output: "structure.md"
      
      - name: "產品願景提取"
        action: "extract_vision"
        tools: ["Read", "Grep"]
        output: "product.md"
      
      - name: "互動式優化"
        action: "interactive_refinement"
        tools: ["mcp__sequential-thinking__sequentialthinking"]
        
  file_creation:
    name: "創建指導文件"
    steps:
      - name: "創建 .ai-rules 目錄"
        action: "create_directory"
        
      - name: "生成 product.md"
        action: "generate_product_doc"
        template: |
          ---
          title: Product Vision
          description: "定義專案的核心目的、目標用戶和主要功能"
          inclusion: always
          ---
          
      - name: "生成 tech.md"
        action: "generate_tech_doc"
        template: |
          ---
          title: Technology Stack
          description: "專案使用的技術棧、工具和依賴"
          inclusion: always
          ---
          
      - name: "生成 structure.md"
        action: "generate_structure_doc"
        template: |
          ---
          title: Project Structure
          description: "專案的目錄結構和檔案組織規範"
          inclusion: always
          ---

tool_strategies:
  tech_detection:
    description: "偵測技術棧"
    search_patterns:
      - "package.json"      # Node.js
      - "requirements.txt"  # Python
      - "pubspec.yaml"     # Flutter
      - "Cargo.toml"       # Rust
      - "go.mod"           # Go
      - "pom.xml"          # Java/Maven
      - "build.gradle"     # Java/Gradle
      
  documentation_search:
    description: "尋找現有文檔"
    patterns:
      - "README*"
      - "CONTRIBUTING*"
      - "docs/*"
      - "*.md"

decision_rules:
  - rule: "發現多個技術棧"
    action: "詢問用戶主要技術棧"
    
  - rule: "缺少產品描述"
    action: "詢問用戶產品願景"
    
  - rule: "複雜專案結構"
    action: "生成分層結構圖"

quality_standards:
  documentation:
    - "YAML front matter 必須包含"
    - "描述清晰且結構化"
    - "包含具體範例"
    - "可執行的指導原則"

interaction_mode:
  initial_analysis:
    - "自動分析代碼庫"
    - "生成初始文檔草稿"
    
  refinement_loop:
    - "展示分析結果"
    - "詢問缺失資訊"
    - "根據反饋更新"
    - "確認最終版本"

output:
  directory: ".ai-rules/"
  files:
    - "product.md"
    - "tech.md" 
    - "structure.md"
    - "custom.md (可選)"

integration:
  with_other_agents:
    - "所有 Agent 讀取 .ai-rules/"
    - "作為專案的單一真相來源"
    - "定期更新以反映專案演進"